# -*- coding: utf-8 -*-
# –ê–≤—Ç–æ–î–æ–ø–æ–≤—ñ–¥—å WhatsApp ‚Äî Linux Wayland (Hyprland + WasIstLos)
# –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è: —Ç–∞–π–º–µ—Ä (–ø–æ–∫–∞–∑ –∑–∞–≤–∂–¥–∏), –∞–Ω—Ç–∏—Ñ–ª—É–¥ (15 —Ö–≤), 1 –¥–æ–ø–æ–≤—ñ–¥—å/–≥–æ–¥ (:45 ¬±2),
# "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑", "–¢–µ—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è", "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É report.ini,
# –ª–æ–≥-–ø–∞–Ω–µ–ª—å. –í—ñ–¥–ø—Ä–∞–≤–∫–∞: –ø—Ä–æ—Å—Ç–æ —Ñ–æ–∫—É—Å –Ω–∞ WhatsApp ‚Üí –¥—Ä—É–∫ —á–µ—Ä–µ–∑ wtype ‚Üí Enter.
#
# –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:
#   sudo pacman -S python tk wl-clipboard        # (wl-clipboard –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
#   yay -S wtype
#
# –ó–∞–ø—É—Å–∫ —É venv (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ):
#   python -m venv venv && source venv/bin/activate && python dopovidi-lnx.py

import tkinter as tk
from tkinter import ttk
import time
import random
from datetime import datetime, timedelta
import threading
import configparser
import os
import queue
import subprocess
import json
import traceback
import shutil

APP_TITLE = "–ê–≤—Ç–æ–î–æ–ø–æ–≤—ñ–¥—å WhatsApp ‚Äî Linux Wayland (Hyprland)"
CONFIG_FILE = "report.ini"
CONFIG_SECTION = "Report"
CONFIG_KEY = "text"

# -------- –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–æ–≥—ñ–∫–∏ --------
ANTIFLOOD_SECONDS = 15 * 60          # –∞–Ω—Ç–∏—Ñ–ª—É–¥: 15 —Ö–≤ –º—ñ–∂ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞–º–∏
VERIFY_RETRIES = 2                   # —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—Ä–æ—Å—Ç—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
PRE_TYPE_DELAY_MS_DEFAULT = 200      # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –¥—Ä—É–∫–æ–º, –º—Å
SEND_DELAY_S_DEFAULT = 0.20          # –ø–∞—É–∑–∞ –ø—ñ—Å–ª—è Enter, —Å

# -------- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤—ñ–∫–Ω–∞ WasIstLos/WhatsApp --------
WASISTLOS_CLASS = "wasistlos"
TITLE_HINTS = ["whatsapp", "wasistlos"]

# -------- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Ç–∏–ª—ñ—Ç --------
HAS_WTYPE   = shutil.which("wtype") is not None
HAS_HYPRCTL = shutil.which("hyprctl") is not None

# -------- –õ–æ–≥–∏ (—á–µ—Ä–≥–∞ ‚Üí —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ) --------
log_q = queue.Queue()
def log_message(msg: str):
    ts = datetime.now().strftime("%H:%M:%S")
    log_q.put(f"[{ts}] {msg}\n")

def log_exception(prefix: str, e: Exception):
    tb = traceback.format_exc(limit=2)
    log_message(f"{prefix}: {e.__class__.__name__}: {e}")
    log_message(f"‚Ü≥ Trace: {tb.strip()}")

# -------- –•–µ–ª–ø–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ --------
def run_cmd(cmd: list[str], timeout: float = 5.0):
    try:
        p = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        return p.returncode, (p.stdout or "").strip(), (p.stderr or "").strip()
    except Exception as e:
        return -1, "", str(e)

# -------- Hyprland: –ø–æ—à—É–∫/—Ñ–æ–∫—É—Å –≤—ñ–∫–Ω–∞ --------
def hypr_clients_json():
    if not HAS_HYPRCTL:
        return []
    rc, out, err = run_cmd(["hyprctl", "-j", "clients"], timeout=3)
    if rc != 0 or not out:
        return []
    try:
        return json.loads(out)
    except Exception as e:
        log_exception("hyprctl -j clients parse", e)
        return []

def find_wasistlos_client():
    """–ó–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç WasIstLos/WhatsApp –ø–æ class –∞–±–æ title."""
    clients = hypr_clients_json()
    if not clients:
        return None
    for c in clients:
        if (c.get("class") or "").lower() == WASISTLOS_CLASS:
            return c
    for c in clients:
        title = (c.get("title") or "").lower()
        if any(h in title for h in TITLE_HINTS):
            return c
    return None

def focus_client(client: dict) -> bool:
    """–ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ workspace –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ñ–æ–∫—É—Å–∏–º–æ –π–æ–≥–æ –≤—ñ–∫–Ω–æ."""
    if not HAS_HYPRCTL:
        log_message("‚ùå –ù–µ–º–∞—î hyprctl ‚Äî —Ñ–æ–∫—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        return False
    ws_id = client.get("workspace", {}).get("id")
    if ws_id is not None:
        run_cmd(["hyprctl", "dispatch", "workspace", str(ws_id)])
        time.sleep(0.08)
    addr = client.get("address")
    if addr:
        run_cmd(["hyprctl", "dispatch", "focuswindow", f"address:{addr}"])
        time.sleep(0.12)
        return True
    # —Ñ–æ–ª–±–µ–∫: –∑–∞ class
    clazz = client.get("class")
    if clazz:
        run_cmd(["hyprctl", "dispatch", "focuswindow", clazz])
        time.sleep(0.12)
        return True
    return False

def ensure_whatsapp_focused(prefix="") -> bool:
    c = find_wasistlos_client()
    if not c:
        log_message(prefix + "‚ùå –í—ñ–∫–Ω–æ WasIstLos/WhatsApp –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return False
    ok = focus_client(c)
    title = c.get("title","")
    clazz = c.get("class","")
    if ok:
        log_message(prefix + f"‚úÖ –ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ: {clazz} ‚Äî '{title}'")
        return True
    log_message(prefix + "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ —á–µ—Ä–µ–∑ hyprctl.")
    return False

# -------- –ï–º—É–ª—è—Ü—ñ—è –≤–≤–æ–¥—É (wtype) --------
def wtype_key(key: str) -> bool:
    if not HAS_WTYPE:
        log_message("‚ùå –ù–µ–º–∞—î wtype (–µ–º—É–ª—è—Ü—ñ—è –∫–ª–∞–≤—ñ—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).")
        return False
    rc, out, err = run_cmd(["wtype", "-k", key])
    return rc == 0

def wtype_text(text: str) -> bool:
    if not HAS_WTYPE:
        log_message("‚ùå –ù–µ–º–∞—î wtype (–µ–º—É–ª—è—Ü—ñ—è –∫–ª–∞–≤—ñ—à –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞).")
        return False
    rc, out, err = run_cmd(["wtype", text])
    return rc == 0

# -------- –í—ñ–¥–ø—Ä–∞–≤–∫–∞: –ø—Ä–æ—Å—Ç–æ –¥—Ä—É–∫ ‚Üí Enter --------
def paste_and_send(
    text: str,
    do_send: bool = True,
    pre_ms: int = PRE_TYPE_DELAY_MS_DEFAULT,
    send_delay_s: float = SEND_DELAY_S_DEFAULT
) -> bool:
    """–§–æ–∫—É—Å –Ω–∞ WhatsApp –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ. –ü—Ä–æ—Å—Ç–æ: –ø–∞—É–∑–∞ ‚Üí –¥—Ä—É–∫ —Ç–µ–∫—Å—Ç—É ‚Üí (–æ–ø—Ü.) Enter."""
    time.sleep(max(0.0, pre_ms/1000.0))

    # –î–†–£–ö –¢–ï–ö–°–¢–£
    if not wtype_text(text):
        log_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç.")
        return False

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ (Enter)
    if do_send:
        if not wtype_key("Return"):
            log_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ Enter.")
            return False
        time.sleep(max(0.05, send_delay_s))
    return True

def send_whatsapp_message(
    text: str,
    do_send: bool = True,
    pre_ms: int = PRE_TYPE_DELAY_MS_DEFAULT,
    send_s: float = SEND_DELAY_S_DEFAULT,
    focus_first: bool = True
) -> bool:
    """–ö–æ–º–ø–ª–µ–∫—Å: (–æ–ø—Ü.) —Ñ–æ–∫—É—Å ‚Üí –¥—Ä—É–∫ ‚Üí Enter."""
    if focus_first:
        if not ensure_whatsapp_focused():
            return False
    for attempt in range(1, VERIFY_RETRIES + 1):
        log_message(f"‚Üí –ù–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏/–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ (—Å–ø—Ä–æ–±–∞ {attempt})‚Ä¶")
        ok = paste_and_send(text, do_send, pre_ms, send_s)
        if ok:
            log_message("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
            return True
        time.sleep(0.15 * attempt)
    return False

# -------- –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —á–∞—Å—É --------
def get_next_slot(base=None):
    """–ù–∞–π–±–ª–∏–∂—á–∏–π —Å–ª–æ—Ç: :45 –ø–æ—Ç–æ—á–Ω–æ—ó/–Ω–∞—Å—Ç—É–ø–Ω–æ—ó –≥–æ–¥–∏–Ω–∏ –∑ –æ—Ñ—Å–µ—Ç–æ–º [-2..+2] —Ö–≤."""
    now = base or datetime.now()
    if now.minute < 45:
        t = now.replace(minute=45, second=0, microsecond=0)
    else:
        t = (now + timedelta(hours=1)).replace(minute=45, second=0, microsecond=0)
    return t + timedelta(minutes=random.randint(-2, 2))

def get_next_hour_slot_from_target(prev_target):
    """–ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–æ—Ç —Ä—ñ–≤–Ω–æ —á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ target: HH:45 ¬±2 —Ö–≤."""
    base = (prev_target + timedelta(hours=1)).replace(minute=45, second=0, microsecond=0)
    return base + timedelta(minutes=random.randint(-2, 2))

# -------- –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞–π–º–µ—Ä–∞ --------
state_lock = threading.Lock()
timer_active = False
next_report_time = None
last_fired_target = None
last_send_ts = 0.0
timer_thread = None
fire_lock = threading.Lock()

# -------- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ / –¢–∞–π–º–µ—Ä --------
def do_send_report(
    text: str,
    pre_ms: int,
    send_s: float,
    via_timer: bool = False,
    focus_first: bool = True
):
    """–ê–Ω—Ç–∏—Ñ–ª—É–¥ + –≤—ñ–¥–ø—Ä–∞–≤–∫–∞; –ø—Ä–µ—Ñ—ñ–∫—Å–∏ –ª–æ–≥—ñ–≤ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞."""
    global last_send_ts
    now_ts = time.time()
    with state_lock:
        if now_ts - last_send_ts < ANTIFLOOD_SECONDS:
            left = int(ANTIFLOOD_SECONDS - (now_ts - last_send_ts))
            log_message(f"‚õî –°–∫–∞—Å–æ–≤–∞–Ω–æ –¥—É–±–ª—å: –∞–Ω—Ç–∏—Ñ–ª—É–¥ {ANTIFLOOD_SECONDS//60} —Ö–≤. –ó–∞–ª–∏—à–∏–ª–æ—Å—å ~{left}—Å.")
            return
        last_send_ts = now_ts

    prefix = "‚è∞ [–¢–∞–π–º–µ—Ä] " if via_timer else ""
    text = (text or "").strip()
    if not text:
        log_message(prefix + "‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    log_message(prefix + "üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é‚Ä¶")
    ok = send_whatsapp_message(
        text, True, pre_ms, send_s,
        focus_first=focus_first
    )
    if ok:
        log_message(prefix + "üéâ –ì–æ—Ç–æ–≤–æ.")
    else:
        log_message(prefix + "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏.")

def schedule_thread():
    """–Ñ–¥–∏–Ω–∏–π —Ç–∞–π–º–µ—Ä-—Ç—Ä–µ–¥: 1 –∑–∞–ø—É—Å–∫/–≥–æ–¥ (:45 ¬±2), –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω—å, –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –≥–æ–¥–∏–Ω—É."""
    global next_report_time, timer_active, last_fired_target
    with state_lock:
        timer_active = True
        if next_report_time is None:
            next_report_time = get_next_slot()
    log_message("‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ.")

    while True:
        with state_lock:
            active = timer_active
            target = next_report_time
            fired_for_target = (last_fired_target == target)
        if not active:
            break

        now = datetime.now()
        if now >= target and not fired_for_target:
            if not fire_lock.acquire(blocking=False):
                time.sleep(0.1)
                continue
            try:
                log_message(f"‚è∞ –¢–ê–ô–ú–ï–†: {target.strftime('%H:%M:%S')} ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
                with state_lock:
                    last_fired_target = target
                # –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ GUI –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É —Ç—Ä–µ–¥—ñ
                def read_and_dispatch():
                    t  = entry.get()
                    pre = pre_paste_delay.get()
                    sd = send_delay.get()
                    focus = focus_before_send.get()
                    threading.Thread(
                        target=do_send_report,
                        args=(t, pre, sd, True, focus),
                        daemon=True
                    ).start()
                root.after(0, read_and_dispatch)

                with state_lock:
                    next_report_time = get_next_hour_slot_from_target(target)
                    log_message(f"üìÖ –ù–∞—Å—Ç—É–ø–Ω–∞ –¥–æ–ø–æ–≤—ñ–¥—å –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞ {next_report_time.strftime('%H:%M:%S')}")
            finally:
                fire_lock.release()
        time.sleep(0.2)

# -------- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É --------
def load_saved_text():
    cfg = configparser.ConfigParser()
    if os.path.exists(CONFIG_FILE):
        cfg.read(CONFIG_FILE, encoding="utf-8-sig")
        return cfg.get(CONFIG_SECTION, CONFIG_KEY, fallback="")
    return ""

def save_text(text):
    cfg = configparser.ConfigParser()
    cfg[CONFIG_SECTION] = {CONFIG_KEY: text}
    with open(CONFIG_FILE, "w", encoding="utf-8-sig") as f:
        cfg.write(f)

# -------- GUI --------
root = tk.Tk()
root.title(APP_TITLE)
root.geometry("980x800")

# GUI-–∑–º—ñ–Ω–Ω—ñ
send_delay = tk.DoubleVar(value=SEND_DELAY_S_DEFAULT)   # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è Enter
pre_paste_delay = tk.IntVar(value=PRE_TYPE_DELAY_MS_DEFAULT)  # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –¥—Ä—É–∫–æ–º (–º—Å)
focus_before_send = tk.BooleanVar(value=True)           # —Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏ WasIstLos –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é

notebook = ttk.Notebook(root); notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# --- –í–∫–ª–∞–¥–∫–∞ –û—Å–Ω–æ–≤–Ω—ñ ---
main_frame = ttk.Frame(notebook); notebook.add(main_frame, text="–û—Å–Ω–æ–≤–Ω—ñ")

tk.Label(main_frame, text="–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–æ–ø–æ–≤—ñ–¥—ñ:", font=("Arial", 12, "bold")).pack(pady=10)
entry = tk.Entry(main_frame, width=70, font=("Arial", 11))
entry.insert(0, load_saved_text()); entry.pack(pady=5)
entry.bind("<KeyRelease>", lambda e: save_text(entry.get()))

# –û–ø—Ü—ñ—ó
opts = tk.LabelFrame(main_frame, text="–û–ø—Ü—ñ—ó", font=("Arial", 10, "bold"))
opts.pack(pady=10, padx=20, fill=tk.X)

tk.Checkbutton(
    opts,
    text="–ü–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–∏—Å—è –Ω–∞ –≤—ñ–∫–Ω–æ WasIstLos/WhatsApp",
    variable=focus_before_send
).pack(anchor="w", padx=10, pady=5)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫
delay_frame = tk.LabelFrame(main_frame, text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–æ–∫", font=("Arial", 10, "bold"))
delay_frame.pack(pady=10, padx=20, fill=tk.X)

r1 = tk.Frame(delay_frame); r1.pack(fill=tk.X, padx=10, pady=5)
tk.Label(r1, text="–ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –¥—Ä—É–∫–æ–º:", font=("Arial", 10)).pack(side=tk.LEFT)
tk.Spinbox(r1, from_=0, to=5000, increment=50, textvariable=pre_paste_delay, width=10, font=("Arial", 10)).pack(side=tk.RIGHT)
tk.Label(r1, text="–º—Å", font=("Arial", 10)).pack(side=tk.RIGHT, padx=(0,5))

r3 = tk.Frame(delay_frame); r3.pack(fill=tk.X, padx=10, pady=5)
tk.Label(r3, text="–ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", font=("Arial", 10)).pack(side=tk.LEFT)
tk.Spinbox(r3, from_=0.05, to=5.0, increment=0.05, textvariable=send_delay, width=10, font=("Arial", 10)).pack(side=tk.RIGHT)
tk.Label(r3, text="—Å–µ–∫—É–Ω–¥", font=("Arial", 10)).pack(side=tk.RIGHT, padx=(0,5))

# –¢–∞–π–º–µ—Ä
timer_frame = tk.LabelFrame(main_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥–æ–ø–æ–≤—ñ–¥—ñ", font=("Arial", 10, "bold"))
timer_frame.pack(pady=10, padx=20, fill=tk.X)

btns = tk.Frame(timer_frame); btns.pack(pady=10)
def start_timer():
    global timer_active, timer_thread
    with state_lock:
        if timer_active and timer_thread and timer_thread.is_alive():
            log_message("‚ö†Ô∏è –¢–∞–π–º–µ—Ä —É–∂–µ –ø—Ä–∞—Ü—é—î (–∞–∫—Ç–∏–≤–Ω–∏–π —Ç—Ä–µ–¥).")
            return
        timer_active = True
        if next_report_time is None:
            globals()['next_report_time'] = get_next_slot()
    timer_thread = threading.Thread(target=schedule_thread, daemon=True)
    timer_thread.start()
    log_message("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞‚Ä¶")

def stop_timer():
    global timer_active
    with state_lock:
        timer_active = False
    log_message("üõë –¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ.")

tk.Button(btns, text="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä", command=start_timer, font=("Arial", 10), bg="#4CAF50", fg="white", width=15).pack(side=tk.LEFT, padx=5)
tk.Button(btns, text="–ó—É–ø–∏–Ω–∏—Ç–∏ —Ç–∞–π–º–µ—Ä", command=stop_timer, font=("Arial", 10), bg="#f44336", fg="white", width=15).pack(side=tk.LEFT, padx=5)

timer_label = tk.Label(timer_frame, text="", font=("Arial", 12), fg="#333")
timer_label.pack(pady=10)

# –î—ñ—ó
actions = tk.LabelFrame(main_frame, text="–î—ñ—ó", font=("Arial", 10, "bold"))
actions.pack(pady=10, padx=20, fill=tk.X)

def send_now():
    t = entry.get()
    pre = pre_paste_delay.get()
    sd = send_delay.get()
    focus = focus_before_send.get()
    threading.Thread(
        target=do_send_report,
        args=(t, pre, sd, False, focus),
        daemon=True
    ).start()

def test_insert():
    t = entry.get().strip()
    if not t:
        log_message("‚ö†Ô∏è –¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç—É –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    def worker():
        log_message("üß™ –¢–µ—Å—Ç: –¥—Ä—É–∫ (–±–µ–∑ Enter)‚Ä¶")
        focus = focus_before_send.get()
        if focus and not ensure_whatsapp_focused("[–¢–µ—Å—Ç] "):
            log_message("‚ùå –¢–µ—Å—Ç: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ–∫—É—Å—É–≤–∞—Ç–∏ WhatsApp.")
            return
        ok = paste_and_send(
            t, do_send=False,
            pre_ms=pre_paste_delay.get(),
            send_delay_s=send_delay.get()
        )
        if ok: log_message("üéâ –î—Ä—É–∫ –ø—Ä–æ–π—à–æ–≤ (–±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏).")
        else:  log_message("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ —É —Ç–µ—Å—Ç—ñ.")
    threading.Thread(target=worker, daemon=True).start()

def diagnose():
    log_message("üî¨ –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
    log_message(f"  hyprctl: {HAS_HYPRCTL}")
    log_message(f"  wtype:   {HAS_WTYPE}")
    c = find_wasistlos_client()
    if c:
        log_message(f"  –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç: class='{c.get('class')}', title='{c.get('title')}', addr={c.get('address')}, ws={c.get('workspace', {}).get('id')}")
    else:
        log_message("  –ö–ª—ñ—î–Ω—Ç WasIstLos/WhatsApp –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í—ñ–¥–∫—Ä–∏–π –∫–ª—ñ—î–Ω—Ç.")

row = tk.Frame(actions); row.pack(pady=10)
tk.Button(row, text="–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞—Ä–∞–∑", command=send_now, font=("Arial", 9), bg="#2196F3", fg="white", width=17).pack(side=tk.LEFT, padx=3)
tk.Button(row, text="–¢–µ—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è", command=test_insert, font=("Arial", 9), bg="#FF9800", fg="white", width=17).pack(side=tk.LEFT, padx=3)
tk.Button(row, text="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", command=diagnose, font=("Arial", 9), bg="#9C27B0", fg="white", width=17).pack(side=tk.LEFT, padx=3)

# --- –í–∫–ª–∞–¥–∫–∞ –õ–æ–≥–∏ ---
log_tab = ttk.Frame(notebook); notebook.add(log_tab, text="–õ–æ–≥–∏")
log_header = tk.Frame(log_tab); log_header.pack(fill=tk.X, padx=10, pady=5)
tk.Label(log_header, text="–õ–æ–≥–∏:", font=("Arial", 12, "bold")).pack(side=tk.LEFT)
def clear_log():
    log_text.delete(1.0, tk.END)
tk.Button(log_header, text="–û—á–∏—Å—Ç–∏—Ç–∏", command=clear_log, font=("Arial", 10), bg="#607D8B", fg="white").pack(side=tk.RIGHT)

log_text = tk.Text(log_tab, wrap=tk.WORD, font=("Consolas", 10), bg="#f5f5f5", fg="#333")
log_scroll = tk.Scrollbar(log_tab, command=log_text.yview)
log_text.config(yscrollcommand=log_scroll.set)
log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10,0), pady=10)
log_scroll.pack(side=tk.RIGHT, fill=tk.Y, padx=(0,10), pady=10)

# --- –õ–æ–≥-–ø–æ–º–ø–∞ ---
def pump_logs():
    try:
        while True:
            line = log_q.get_nowait()
            log_text.insert(tk.END, line)
            log_text.see(tk.END)
    except queue.Empty:
        pass
    root.after(50, pump_logs)

# --- –¢–∞–π–º–µ—Ä–Ω–∏–π –ª–µ–π–±–ª (–ø–æ–∫–∞–∑ –∑–∞–≤–∂–¥–∏) ---
def compute_display_target():
    with state_lock:
        target = next_report_time
    return target if target is not None else get_next_slot()

def update_timer_label():
    target = compute_display_target()
    now = datetime.now()
    remaining = target - now
    if remaining.total_seconds() < 0:
        target = get_next_slot(now + timedelta(seconds=1))
        remaining = target - now
    mins, secs = divmod(int(remaining.total_seconds()), 60)
    hours, mins = divmod(mins, 60)
    with state_lock:
        active = timer_active
    status = "üü¢ –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–π" if active else "‚ö™ –¢–∞–π–º–µ—Ä –≤–∏–º–∫–Ω–µ–Ω–∏–π"
    timer_label.config(
        text=f"{status}\n–ù–∞—Å—Ç—É–ø–Ω–∞ –¥–æ–ø–æ–≤—ñ–¥—å: {target.strftime('%H:%M:%S')}\n–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {hours:02d}:{mins:02d}:{secs:02d}"
    )
    root.after(200, update_timer_label)

# --- –°—Ç–∞—Ä—Ç ---
root.title(APP_TITLE)
log_message("üöÄ –ó–∞–ø—É—Å–∫ (Wayland/Hyprland). –ü–æ—Ç—Ä—ñ–±–Ω—ñ: hyprctl, wtype.")

root.after(0, pump_logs)
root.after(0, update_timer_label)
root.mainloop()

